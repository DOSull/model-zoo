;; The MIT License (MIT)
;;
;; Copyright (c) 2011-24 David O'Sullivan and George Perry
;;
;; Permission is hereby granted, free of charge, to any person 
;; obtaining a copy of this software and associated documentation 
;; files (the "Software"), to deal in the Software without restriction, 
;; including without limitation the rights to use, copy, modify, merge,
;; publish, distribute, sublicense, and/or sell copies of the Software,
;; and to  permit persons to whom the Software is furnished to do so,
;; subject to the following conditions:
;;
;; The above copyright notice and this permission notice shall be included
;; in all copies or substantial portions of the Software.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
;; OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
;; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;; DEALINGS IN THE SOFTWARE.
;;

;; Various routines to enable screen snaps to be exported into R for display
;; including time-series of model conditions.
;; require: r extension and matlab in R

to cluster-to-r [grey-levels]
  sr:set "nr" world-height
  sr:set "nc" world-width
  sr:set "z" map [ p -> [t-colonised] of p ] reverse sort patches
  sr:set "n" grey-levels
  sr:run "grey.ramp <- grey((0:(n-1))/n)"
  sr:run "z <- (matrix(z, nrow=nr, ncol=nc, byrow = TRUE))"
  sr:run "z <- rot90(z)"
  sr:run "z <- ifelse(z < 0, NA, z)"
  sr:set-plot-device
  sr:run "image(z, col = grey.ramp, asp = 1, xaxt = 'n', yaxt = 'n')"
  user-message "Plot will close when you close this dialog."
  sr:run "dev.off()"
end

to cluster-to-r-bw
  sr:set "nr" world-height
  sr:set "nc" world-width
  sr:set "z" map [ p -> [t-colonised] of p ] reverse sort patches
  sr:run "z <- (matrix(z, nrow=nr, ncol=nc, byrow = TRUE))"
  sr:run "z <- rot90(z)"
  sr:run "z <- ifelse(z < 0, 0, 1)"
  sr:set-plot-device
  sr:run "image(z, col = c('white','black'), asp = 1, xaxt = 'n', yaxt = 'n')"
  user-message "Plot will close when you close this dialog."
  sr:run "dev.off()"
end

to cluster-ts-to-r
  sr:set "nr" world-height
  sr:set "nc" world-width
  sr:set "z.raw" map [ p -> [t-colonised] of p ] reverse sort patches
  sr:run "grey.ramp <- grey((0:7)/8)"
  sr:run "z.raw <- (matrix(z.raw, nrow=nr, ncol=nc, byrow = TRUE))"
  sr:run "z.raw <- rot90(z.raw)"

  let mf-cols ceiling (n-slices / 3)
  if ticks < max-time-slice [set max-time-slice ticks]
  sr:set "n.col" mf-cols 
  sr:set-plot-device
  sr:run "par(mfrow = c(3, n.col))"
  let slices n-values n-slices [ i -> (i + 1) * floor(max-time-slice / n-slices)]
  foreach slices [ slice -> 
    sr:set "t" slice
    sr:run "z <- ifelse(z.raw < 0 | z.raw > t, NA, z.raw)"
    sr:run "image(z, col = grey.ramp, asp = 1, xaxt = 'n', yaxt = 'n', main = paste('Time = ', t))"
  ]
  user-message "Plot will close when you close this dialog."
  sr:run "dev.off()"
end

to edge-to-r
  sr:set "nr" world-height
  sr:set "nc" world-width
  sr:set "z" map [ p -> [member? p perimeter-set] of p ] reverse sort patches
  sr:run "z <- matrix(z, nrow = nr, ncol = nc)"
  sr:set-plot-device
  sr:run "image(z, col = c('white', 'black'), asp = 1, xaxt = 'n', yaxt = 'n')"
  user-message "Plot will close when you close this dialog."
  sr:run "dev.off()"
end      

to perimeter-ts-to-r
  sr:set "p" p-length-list
  sr:set-plot-device
  sr:run "plot(p, type = 'l', las = 1, bty = 'n', xlab = 'Time', ylab = 'Perimeter length', xlim = c(0,20000), ylim = c(0,1500))"
  user-message "Plot will close when you close this dialog."
  sr:run "dev.off()"
end

