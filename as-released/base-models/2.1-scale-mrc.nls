; Copyright (c) 2011-13 David O'Sullivan and George Perry
; Licensed under the Creative Commons 
; Attribution-NonCommercial-ShareAlike 3.0 License 
; See Info tab for full copyright and license information
;;

to init-patch-variables
  ask patches [
    set class -1
    set in-perc-cluster? false
  ]
end



;; Colours patches by class
to color-patches
  ask patches [
    set pcolor item class color-list
  ]  
end



;; Retrieve the list of relative probabilities of 
;; suitability classes from a file
to read-class-file
  carefully [
    file-open class-file
    set num-classes file-read ;; first item in file is the number of classes
    set class-CFD (list 0) ;; initialise the CFD to 0
    set class-FD [] ;; empty FD
    while [ not file-at-end? ] [
      let prev-n last class-CFD
      let next-n file-read
      set class-CFD lput (next-n + prev-n) class-CFD
      set class-FD lput next-n class-FD
    ]
    set class-CFD but-first class-CFD ;; throw away the zero
    let tot-rel-p last class-CFD
    set class-CFD map [ ? / tot-rel-p ] class-CFD
    set class-FD map [ ? / tot-rel-p ] class-FD
    file-close
  ] [ file-close
     print "Error reading input file"]
end



;; Internal setup based on SIMMAP algorithm
;; This is slow -- I believe due repeated use of long lists
to setup-mrc
  ;; assign patches to percolation cluster
  ask patches [ 
    if random-float 1 < p [ 
      set in-perc-cluster? true 
      set pcolor white 
    ]
  ]
  mark-habitat-patches
  assign-habitat-patches-by-proportion
  set clusters [] ;; throw away the list
  assign-unassigned-to-habitat-patches
  if remove-singleton-patches? [
    let singletons patches with [not any? neighbors4 with [class = [class] of myself]]
    ask singletons [
      set class [class] of one-of neighbors4
    ]
  ]
end


;; identifies and labels sequentially 
;; from 0 the connected regions
;; in the percolation cluster
to mark-habitat-patches
  let patch-count 1
  let patches-to-mark sort patches with [in-perc-cluster?]
  while [length patches-to-mark > 0] [
    let this-cluster (patch-set one-of patches-to-mark)
    let current-cluster patch-set nobody
    ;; iteratively grow the patch-set that is this cluster
    while [any? this-cluster] [ 
      ;; mark by setting habitat-patch value
      ask this-cluster [ 
        set class patch-count
      ]
      set current-cluster (patch-set current-cluster this-cluster)
      ;; get the next set from the neighbours 4 of the current set
      set this-cluster (patch-set [neighbors4] of this-cluster) with [to-mark?]
    ]
    ;; increment the patch-count and reset the set to mark
    set patch-count patch-count + 1
    set patches-to-mark filter [[class] of ? < 0] patches-to-mark
    ;; add the current cluster to the list of all clusters
    set clusters lput current-cluster clusters
  ]
end


to-report to-mark?
  report class < 0 and in-perc-cluster?
end


;; class-FD is a list of the required landscape proportion in each type
;; cells in regions of the percolation cluster should be relabelled
;; as 1, 2, 3... in the required proportions...
to assign-habitat-patches-by-proportion
  ;; make a list of the target number of patches in each class
  let num-patches-set count patches with [class > 0]
  let target-counts map [ ? * num-patches-set ] class-FD
  ;; iteratively assigning clusters in the percolation cluster
  ;; to a class, always adding to the class which is furthest
  ;; from its target count
  foreach clusters [
    let biggest-shortfall max target-counts
    let biggest-shortfall-index position biggest-shortfall target-counts
    ask ? [ 
      set class biggest-shortfall-index
    ]
    ;; update the target counts to reflect assignment just made
    set target-counts replace-item biggest-shortfall-index target-counts (biggest-shortfall - count ?)
  ]
end


;; patches so far not assigned to a class are
;; now assigned based on the classes of neighbouring assigned patches 
to assign-unassigned-to-habitat-patches
  ask patches with [class < 0] [ 
    let N neighbors with [class >= 0]
    ifelse any? N
    [ set class one-of modes [class] of N ]
    [ let random-draw random-float 1
      let i 0
      let value-set? false
      while [ i < num-classes and not value-set? ] [
        if random-draw <= (item i class-CFD) [
          set class i
          set value-set? true
        ]
        set i i + 1
      ]
    ]
  ]
end
